{"ts":1381002118804,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#\n# metakoans.rb is an arduous set of exercises designed to stretch\n# meta-programming muscle.  the focus is on a single method 'attribute' which\n# behaves much like the built-in 'attr', but whose properties require delving\n# deep into the depths of meta-ruby.  usage of the 'attribute' method follows\n# the general form of\n#   \n#   class C\n#     attribute 'a'\n#   end\n#   \n#   o = C::new\n#   o.a = 42  # setter - sets @a\n#   o.a       # getter - gets @a \n#   o.a?      # query - true if @a\n#   \n# but reaches much farther than the standard 'attr' method as you will see\n# shortly.\n#   \n# your path, should you choose to follow it, is to write a single file\n# 'knowledge.rb' implementing all functionality required by the koans below.\n# as a student of meta-programming your course will be guided by a guru whose\n# wisdom and pithy sayings will assist you on your journey.\n#   \n# a successful student will eventually be able to do this   \n#   \n#   harp:~ > ruby metakoans.rb knowledge.rb\n#   koan_1 has expanded your awareness\n#   koan_2 has expanded your awareness\n#   koan_3 has expanded your awareness\n#   koan_4 has expanded your awareness\n#   koan_5 has expanded your awareness\n#   koan_6 has expanded your awareness\n#   koan_7 has expanded your awareness\n#   koan_8 has expanded your awareness\n#   koan_9 has expanded your awareness\n#   mountains are again merely mountains\n#   \n\n\nmodule MetaKoans\n#\n# 'attribute' must provide getter, setter, and query to instances\n#\n  def koan_1\n    c = Class::new {\n      attribute 'a'\n    }\n\n    o = c::new\n\n    assert{ not o.a? }\n    assert{ o.a = 42 }\n    assert{ o.a == 42 }\n    assert{ o.a? }\n  end\n#\n# 'attribute' must provide getter, setter, and query to classes \n#\n  def koan_2\n    c = Class::new {\n      class << self\n        attribute 'a'\n      end\n    }\n\n    assert{ not c.a? }\n    assert{ c.a = 42 }\n    assert{ c.a == 42 }\n    assert{ c.a? }\n  end\n#\n# 'attribute' must provide getter, setter, and query to modules at module\n# level\n#\n  def koan_3\n    m = Module::new {\n      class << self\n        attribute 'a'\n      end\n    }\n\n    assert{ not m.a? }\n    assert{ m.a = 42 }\n    assert{ m.a == 42 }\n    assert{ m.a? }\n  end\n#\n# 'attribute' must provide getter, setter, and query to modules which operate\n# correctly when they are included by or extend objects\n#\n  def koan_4\n    m = Module::new {\n      attribute 'a'\n    }\n\n    c = Class::new {\n      include m\n      extend m\n    }\n\n    o = c::new\n\n    assert{ not o.a? }\n    assert{ o.a = 42 }\n    assert{ o.a == 42 }\n    assert{ o.a? }\n\n    assert{ not c.a? }\n    assert{ c.a = 42 }\n    assert{ c.a == 42 }\n    assert{ c.a? }\n  end\n#\n# 'attribute' must provide getter, setter, and query to singleton objects \n#\n  def koan_5\n    o = Object::new\n\n    class << o\n      attribute 'a'\n    end\n\n    assert{ not o.a? }\n    assert{ o.a = 42 }\n    assert{ o.a == 42 }\n    assert{ o.a? }\n  end\n#\n# 'attribute' must provide a method for providing a default value as hash\n#\n  def koan_6\n    c = Class::new {\n      attribute 'a' => 42\n    }\n\n    o = c::new\n\n    assert{ o.a == 42 }\n    assert{ o.a? }\n    assert{ (o.a = nil) == nil }\n    assert{ not o.a? }\n  end\n#\n# 'attribute' must provide a method for providing a default value as block\n# which is evaluated at instance level \n#\n  def koan_7\n    c = Class::new {\n      attribute('a'){ fortytwo }\n      def fortytwo\n        42\n      end\n    }\n\n    o = c::new\n\n    assert{ o.a == 42 }\n    assert{ o.a? }\n    assert{ (o.a = nil) == nil }\n    assert{ not o.a? }\n  end\n#\n# 'attribute' must provide inheritance of default values at both class and\n# instance levels\n#\n  def koan_8\n    b = Class::new {\n      class << self\n        attribute 'a' => 42\n        attribute('b'){ a }\n      end\n      attribute 'a' => 42\n      attribute('b'){ a }\n    }\n\n    c = Class::new b\n\n    assert{ c.a == 42 }\n    assert{ c.a? }\n    assert{ (c.a = nil) == nil }\n    assert{ not c.a? }\n\n    o = c::new\n\n    assert{ o.a == 42 }\n    assert{ o.a? }\n    assert{ (o.a = nil) == nil }\n    assert{ not o.a? }\n  end\n#\n# into the void \n#\n  def koan_9\n    b = Class::new {\n      class << self\n        attribute 'a' => 42\n        attribute('b'){ a }\n      end\n      include Module::new {\n        attribute 'a' => 42\n        attribute('b'){ a }\n      }\n    }\n\n    c = Class::new b\n\n    assert{ c.a == 42 }\n    assert{ c.a? }\n    assert{ c.a = 'forty-two' }\n    assert{ c.a == 'forty-two' }\n    assert{ b.a == 42 }\n\n    o = c::new\n\n    assert{ o.a == 42 }\n    assert{ o.a? }\n    assert{ (o.a = nil) == nil }\n    assert{ not o.a? }\n  end\n\n  def assert() \n    bool = yield\n    abort \"assert{ #{ caller.first[%r/^.*(?=:)/] } } #=> #{ bool.inspect }\" unless bool \n  end\nend\n\n\nclass MetaStudent\n  def initialize knowledge\n    require knowledge\n  end\n  def ponder koan\n    begin\n      send koan\n      true\n    rescue => e\n      STDERR.puts %Q[#{ e.message } (#{ e.class })\\n#{ e.backtrace.join 10.chr }]\n      false\n    end\n  end\nend\n\n\nclass MetaGuru\n  require \"singleton\"\n  include Singleton\n\n  def enlighten student\n    student.extend MetaKoans\n\n    koans = student.methods.grep(%r/koan/).sort\n\n    attainment = nil\n\n    koans.each do |koan| \n      awakened = student.ponder koan\n      if awakened\n        puts \"#{ koan } has expanded your awareness\"\n        attainment = koan\n      else\n        puts \"#{ koan } still requires meditation\"\n        break\n      end\n    end\n\n    puts(\n      case attainment\n        when nil \n          \"mountains are merely mountains\"\n        when 'koan_1', 'koan_2'\n          \"learn the rules so you know how to break them properly\"\n        when 'koan_3', 'koan_4'\n          \"remember that silence is sometimes the best answer\"\n        when 'koan_5', 'koan_6'\n          \"sleep is the best meditation\"\n        when 'koan_7'\n          \"when you lose, don't lose the lesson\"\n        when 'koan_8'\n          \"things are not what they appear to be: nor are they otherwise\"\n        else\n          \"mountains are again merely mountains\"\n      end\n    )\n  end\n  def self::method_missing m, *a, &b\n    instance.send m, *a, &b\n  end\nend\n\n\n\nknowledge = ARGV.shift or abort \"#{ $0 } knowledge.rb\"\nstudent = MetaStudent::new knowledge \nMetaGuru.enlighten student\n"]],"start1":0,"start2":0,"length1":0,"length2":6185}]],"length":6185}
{"contributors":[],"silentsave":false,"ts":1381076204195,"patch":[[{"diffs":[[0,"y.\n#   \n"],[1,"\n\n"],[0,"# a succ"]],"start1":870,"start2":870,"length1":16,"length2":18}]],"length":6187,"saved":false}
